// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v52/github"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// DownloadReleaseAssets provides a mock function with given fields: ctx, release, path, assetlist
func (_m *Client) DownloadReleaseAssets(ctx context.Context, release *github.RepositoryRelease, path string, assetlist []string) error {
	ret := _m.Called(ctx, release, path, assetlist)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *github.RepositoryRelease, string, []string) error); ok {
		r0 = rf(ctx, release, path, assetlist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReleaseByTag provides a mock function with given fields: ctx, tag
func (_m *Client) GetReleaseByTag(ctx context.Context, tag string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, tag)

	var r0 *github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(ctx, tag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRelease provides a mock function with given fields: ctx
func (_m *Client) ListRelease(ctx context.Context) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx)

	var r0 []*github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*github.RepositoryRelease); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *github.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
